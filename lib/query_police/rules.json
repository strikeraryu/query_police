{
  "select_type": {
    "description": "Type of SELECT statement used in the table",
    "value_type": "string",
    "rules": {
      "SIMPLE": {
        "impact": "positive",
        "message": "This query is a simple one without any subqueries or unions",
        "suggestion": ""
      }
    }
  },
  "type": {
    "description": "Type of join used in the query for a specific table",
    "value_type": "string",
    "rules": {
      "system": {
        "impact": "positive",
        "message": "This table contains zero or one rows, so no changes are needed",
        "suggestion": ""
      },
      "const": {
        "impact": "positive",
        "message": "This table has only one indexed matching row, making this the fastest type of join",
        "suggestion": ""
      },
      "eq_ref": {
        "impact": "positive",
        "message": "All index parts are used in this join, and the index is a primary key or unique not null",
        "suggestion": ""
      },
      "ref": {
        "impact": "caution",
        "message": "All matching rows of an indexed column are read for each combination of rows from the previous table",
        "suggestion": "Ensure the referenced column is indexed and check for null values and duplicates. If possible, consider upgrading to an eq_ref join type. You can achieve this by adding unique and not null constraints to the index - $key used in $table table"
      },
      "fulltext": {
        "impact": "caution",
        "message": "The join uses a table FULLTEXT index, with the index key used - $key",
        "suggestion": "This should only be used for columns with heavy text content"
      },
      "ref_or_null": {
        "impact": "caution",
        "message": "A ref index is used with Null values in the $table table",
        "suggestion": "Consider upgrading to an eq_ref join if possible. You can achieve this by adding unique and not null constraints to the index - $key used in $table table"
      },
      "index_merge": {
        "impact": "caution",
        "message": "The join involves a list of indexes, with keys used: $key",
        "suggestion": "Be cautious as this might be slow if the indexes are poorly chosen or if there are too many indexes being used"
      },
      "range": {
        "impact": "caution",
        "message": "An index is used to find matching rows within a specific range",
        "suggestion": "Please check the range; ensure it's not too broad"
      },
      "index": {
        "impact": "caution",
        "message": "The entire index tree is scanned to find matching rows",
        "suggestion": "This can be slow for large indexes (Your key length: $key_len). Use this option carefully"
      },
      "ALL": {
        "impact": "negative",
        "message": "The entire $table table is scanned to find matching rows. There are $amount_possible_keys possible keys that could be used",
        "suggestion": "Use an index in this scenario. You can use the index from possible key: $possible_keys or add a new index to the $table table as needed",
        "score": {
          "value": 100,
          "type": "base"
        }
      }
    }
  },
  "rows": {
    "description": "Estimated number of rows scanned to find matching rows",
    "value_type": "number",
    "rules": {
      "threshold": {
        "amount": 100,
        "impact": "negative",
        "message": "This query scans approximately $value rows per join for the $table table",
        "suggestion": "Consider using an index from $possible_keys or adding a new index to the $table table to reduce the number of scanned rows"
      }
    }
  },
  "possible_keys": {
    "description": "Index keys possible for a specific table",
    "value_type": "array",
    "delimiter": ",",
    "rules": {
      "absent": {
        "impact": "negative",
        "message": "There are no possible keys for the $table table, which can lead to a full scan",
        "suggestion": "Add appropriate index keys for the $table table",
        "score": {
          "value": 50,
          "type": "base"
        }
      },
      "threshold": {
        "amount": 5,
        "impact": "negative",
        "message": "There are $amount possible keys for the $table table; having too many index keys can be suboptimal",
        "suggestion": "Check for unnecessary indexes in the $table table",
        "score": {
          "value": 20,
          "type": "threshold_relative"
        }
      }
    }
  },
  "key": {
    "description": "The index key used",
    "value_type": "string",
    "rules": {
      "absent": {
        "impact": "negative",
        "message": "No index key is being used for the $table table, which may result in a full table scan",
        "suggestion": "Use an index from possible_keys: $possible_keys or add a new one to the $table table as required",
        "score": {
          "value": 50,
          "type": "base"
        }
      }
    }
  },
  "key_len": {
    "description": "Length of the index key used",
    "value_type": "number",
    "rules": {}
  },
  "filtered": {
    "description": "Percentage of rows appearing from the total",
    "value_type": "number",
    "rules": {}
  },
  "Extra": {
    "description": "Additional information about the query execution plan",
    "value_type": "array",
    "delimiter": ";",
    "rules": {
      "Using filesort": {
        "impact": "negative",
        "message": "A file-based sorting algorithm is being used for your result. This could be inefficient and lead to longer query times",
        "suggestion": "Ensure that the result set is small or use a proper index",
        "score": {
          "value": 50,
          "type": "base"
        }
      },
      "Using join buffer": {
        "impact": "",
        "message": "",
        "suggestion": ""
      },
      "Using index condition": {
        "impact": "",
        "message": "",
        "suggestion": ""
      },
      "no matching row in const table": {
        "impact": "negative",
        "message": "The query wasn't thoroughly analyzed as it refers to a constant value with no matching row in the respective tables",
        "suggestion": "Add rows that correspond to the constant value or modify the reference. You can associate the reference with a constant value that has a corresponding row or refer to a column with a matching value",
        "score": {
          "value": 1000,
          "type": "base"
        }
      }
    }
  },
  "detailed#used_columns": {
    "description": "Number of columns used to execute the query",
    "value_type": "array",
    "rules": {
      "threshold": {
        "amount": 5,
        "impact": "negative",
        "message": "You have selected $amount columns, which could be excessive",
        "suggestion": "Please only select the required columns",
        "score": {
          "value": 10,
          "type": "threshold_relative"
        }
      }
    }
  },
  "detailed#cost_info#read_cost": {
    "description": "Read cost to execute the query",
    "value_type": "number",
    "rules": {
      "threshold": {
        "amount": 100,
        "impact": "negative",
        "message": "The read cost of the query is $amount, which is considered too high. It's likely that you are scanning too many rows",
        "suggestion": "Please optimize your query by using proper indexes, querying only the required data, and ensuring appropriate joins",
        "score": {
          "value": 0.01,
          "type": "relative"
        }
      }
    }
  },
  "cardinality": {
    "description": "Total cardinality of the query",
    "value_type": "number",
    "rules": {
      "threshold": {
        "amount": 500,
        "impact": "negative",
        "message": "The cardinality of the table is $amount, which is considered too high",
        "suggestion": "Please optimize your query by using proper indexes, querying only the required data, and ensuring appropriate joins",
        "score": {
          "value": 0.01,
          "type": "relative"
        }
      }
    }
  }
}
